// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id Int @id @default(autoincrement())
  name String 
  phone String? @unique
  email String? @unique
  avatar String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favorites Favorite[]
  tokens Token[]
  products Product[]
  posts Post[]
  answers Answer[]
  wonderings Wondering[]
}

model Token {
  id Int @id @default(autoincrement())
  payload String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  image String
  name String 
  price Int
  favorites Favorite[]
  description String @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  question String @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  answers Answer[]
  wonderings Wondering[]
}

model Answer {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  answer String @db.MediumText
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wondering {
    id Int @id @default(autoincrement())
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int
    answer String? @db.MediumText
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}